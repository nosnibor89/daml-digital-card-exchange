module TestExchange where

import Daml.Script
import Exchange
import Setup


{-
   Test main workflow and happy paths
   1. Issuer company can publish card and sets open for bidding
   2. Buyer 1 bids on card
   3. Buyer 2 bids on card
   4. Issuer company (also current card owner) accepts highest bid and transfer ownership to highest bidder
   5. New owner(former highest bidder) sets new price for card and starts new bidding
   6. Buyer 3 bids on card
   7. Buyer 1 bids on card
   8. Owner can accept highest bid and transfer ownership to highest bidder
-}
testBiddingWorkflow: Script()
testBiddingWorkflow = script do
    testParties@TestParties{..} <- setupTestUsersAndParties
    cardService <- createCardService issuer
    --  issuer (Issuer) publishes card
    cardCid <- submit issuer do
        exerciseCmd cardService PublishCard with
            description = "Michael Jordan rookie card"
            price = 1.00
            cardUrl = "http://fakeurl.com"
            id = "michael-jordan-rookie-card"

    -- issuer (Issuer) sets card open for bidding
    cardCid <- submit issuer do 
        exerciseCmd cardCid StartBidding with
            newPrice = 2000.00

    (cardCid, card) <- submit issuer do
        exerciseCmd cardService FetchCard with
            cardId = "michael-jordan-rookie-card"
    
    -- Buyer 1 bids on card. Should be the new ower as has the highest bid
    bid1Info <- bidOnCard buyer1 card 3000.00

    -- Buyer 2 bids on card
    bid2Info <- bidOnCard buyer2 card 2500.00
    
    -- 4. issuer (Issuer and current owner) accepts highest bid and 
    --    transfer ownership to highest bidder. All previous bids are closed.
    bids <- query @CardBid issuer
    cardCid <- submit issuer do
        exerciseCmd cardCid AcceptHighestBid with
            bids = bids
    closeTestBids bids [(bid1Info.biddingService, bid1Info.bidder), (bid2Info.biddingService, bid2Info.bidder)]

    -- Second Bidding Starts
    
     -- New owner(former Buyer 1) sets new price for card and starts new bidding

    -- buyer 1 is new card owner, so he can start the bidding
    cardCid <- submit buyer1 do 
        exerciseCmd cardCid StartBidding with
            newPrice = 10000.00
    (cardCid, card) <- submit issuer do
        exerciseCmd cardService FetchCard with
            cardId = "michael-jordan-rookie-card"

    -- Buyer3 bids on card
    bid1Info <- bidOnCard buyer3 card 11000.00

    -- Buyer 2 bids on card
    bid2Info <- bidOnCard buyer2 card 12000.00

    -- 4. Owner accepts highest bid and 
    --    transfer ownership to highest bidder. All previous bids are closed.
    bids <- query @CardBid buyer1
    submit buyer1 do
        exerciseCmd cardCid AcceptHighestBid with
            bids = bids
    closeTestBids bids [(bid1Info.biddingService, bid1Info.bidder), (bid2Info.biddingService, bid2Info.bidder)]


-- Unhappy paths

-- testCantPublishDuplicatedCard: Card cannot be created twice with same id
testCantPublishDuplicatedCard: Script ()
testCantPublishDuplicatedCard = script do 
    issuer <- allocateParty "NBA"
    service <- createCardService(issuer)

    submit issuer do
        exerciseCmd service PublishCard with
            description = "Michael Jordan rookie card"
            price = 1000.00
            cardUrl = "http://fakeurl.com"
            id = "michael-jordan-rookie-card"

    -- Trying to create an asset with the same id should fail
    submitMustFail issuer do
        exerciseCmd service PublishCard with
            description = "Michael Jordan rookie card"
            price = 1000.00
            cardUrl = "http://fakeurl.com"
            id = "michael-jordan-rookie-card"


-- testCantBidOnCardNoReadyForBidding: Buyer cannot bid on card that is not open for bidding
testCantBidOnCardNoReadyForBidding: Script ()
testCantBidOnCardNoReadyForBidding = script do 
    issuer <- allocateParty "NBA"
    buyer <- allocateParty "Buyer"
    service <- createCardService(issuer)

    cardCid <- submit issuer do
        exerciseCmd service PublishCard with
            description = "Michael Jordan rookie card"
            price = 1000.00
            cardUrl = "http://fakeurl.com"
            id = "michael-jordan-rookie-card"

    (cardCid, card) <- submit issuer do
        exerciseCmd service FetchCard with
            cardId = "michael-jordan-rookie-card"

    biddingService <- createCardBiddingService issuer card
    
    -- buyer (Buyer) bids on card. Should fail as card is not open for bidding
    submitMustFail buyer do
        exerciseCmd biddingService AddBid with
            bid = 2000.00
            bidder = buyer


-- testCantBidForALowerPrice: Buyer cannot bid for a lower price than the asked price
testCantBidForALowerPrice: Script ()
testCantBidForALowerPrice = script do 
    issuer <- allocateParty "NBA"
    buyer <- allocateParty "Buyer"
    service <- createCardService(issuer)

    cardCid <- submit issuer do
        exerciseCmd service PublishCard with
            description = "Michael Jordan rookie card"
            price = 1000.00
            cardUrl = "http://fakeurl.com"
            id = "michael-jordan-rookie-card"

    cardCid <- submit issuer do 
        exerciseCmd cardCid StartBidding with
            newPrice = 2000.00

    (cardCid, card) <- submit issuer do
        exerciseCmd service FetchCard with
            cardId = "michael-jordan-rookie-card"

    biddingService <- createCardBiddingService issuer card
    
    -- buyer (Buyer) bids on card. Should fail as bid is lower than the asked price
    submitMustFail buyer do
        exerciseCmd biddingService AddBid with
            bid = 1000.00
            bidder = buyer


-- testCantBidOnOwnCard: Owner cannot bid on his own card
testCantBidOnOwnCard: Script ()
testCantBidOnOwnCard = script do 
    issuer <- allocateParty "NBA"
    service <- createCardService(issuer)

    cardCid <- submit issuer do
        exerciseCmd service PublishCard with
            description = "Michael Jordan rookie card"
            price = 1000.00
            cardUrl = "http://fakeurl.com"
            id = "michael-jordan-rookie-card"

    cardCid <- submit issuer do 
        exerciseCmd cardCid StartBidding with
            newPrice = 2000.00

    (cardCid, card) <- submit issuer do
        exerciseCmd service FetchCard with
            cardId = "michael-jordan-rookie-card"

    biddingService <- createCardBiddingService issuer card
    
    -- issuer (Issuer) bids on card. Should fail as issuer is the owner
    submitMustFail issuer do
        exerciseCmd biddingService AddBid with
            bid = 2000.00
            bidder = issuer